///
/// @Generated by Mockolo
///

import Combine
@testable import Domain
import Erik
import Foundation
import UIKit
import WebKit

public class ClipQueryServiceProtocolMock: ClipQueryServiceProtocol {
    public init() { }

    public private(set) var existsClipCallCount = 0
    public var existsClipHandler: ((URL) -> (Result<Bool, ClipStorageError>))?
    public func existsClip(havingUrl: URL) -> Result<Bool, ClipStorageError> {
        existsClipCallCount += 1
        if let existsClipHandler = existsClipHandler {
            return existsClipHandler(havingUrl)
        }
        fatalError("existsClipHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryClipCallCount = 0
    public var queryClipHandler: ((Clip.Identity) -> (Result<ClipQuery, ClipStorageError>))?
    public func queryClip(having id: Clip.Identity) -> Result<ClipQuery, ClipStorageError> {
        queryClipCallCount += 1
        if let queryClipHandler = queryClipHandler {
            return queryClipHandler(id)
        }
        fatalError("queryClipHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryAllClipsCallCount = 0
    public var queryAllClipsHandler: (() -> (Result<ClipListQuery, ClipStorageError>))?
    public func queryAllClips() -> Result<ClipListQuery, ClipStorageError> {
        queryAllClipsCallCount += 1
        if let queryAllClipsHandler = queryAllClipsHandler {
            return queryAllClipsHandler()
        }
        fatalError("queryAllClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryUncategorizedClipsCallCount = 0
    public var queryUncategorizedClipsHandler: (() -> (Result<ClipListQuery, ClipStorageError>))?
    public func queryUncategorizedClips() -> Result<ClipListQuery, ClipStorageError> {
        queryUncategorizedClipsCallCount += 1
        if let queryUncategorizedClipsHandler = queryUncategorizedClipsHandler {
            return queryUncategorizedClipsHandler()
        }
        fatalError("queryUncategorizedClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryClipsCallCount = 0
    public var queryClipsHandler: (([String]) -> (Result<ClipListQuery, ClipStorageError>))?
    public func queryClips(matchingKeywords keywords: [String]) -> Result<ClipListQuery, ClipStorageError> {
        queryClipsCallCount += 1
        if let queryClipsHandler = queryClipsHandler {
            return queryClipsHandler(keywords)
        }
        fatalError("queryClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryClipsTaggedCallCount = 0
    public var queryClipsTaggedHandler: ((Tag) -> (Result<ClipListQuery, ClipStorageError>))?
    public func queryClips(tagged tag: Tag) -> Result<ClipListQuery, ClipStorageError> {
        queryClipsTaggedCallCount += 1
        if let queryClipsTaggedHandler = queryClipsTaggedHandler {
            return queryClipsTaggedHandler(tag)
        }
        fatalError("queryClipsTaggedHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryAlbumCallCount = 0
    public var queryAlbumHandler: ((Album.Identity) -> (Result<AlbumQuery, ClipStorageError>))?
    public func queryAlbum(having id: Album.Identity) -> Result<AlbumQuery, ClipStorageError> {
        queryAlbumCallCount += 1
        if let queryAlbumHandler = queryAlbumHandler {
            return queryAlbumHandler(id)
        }
        fatalError("queryAlbumHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryAllAlbumsCallCount = 0
    public var queryAllAlbumsHandler: (() -> (Result<AlbumListQuery, ClipStorageError>))?
    public func queryAllAlbums() -> Result<AlbumListQuery, ClipStorageError> {
        queryAllAlbumsCallCount += 1
        if let queryAllAlbumsHandler = queryAllAlbumsHandler {
            return queryAllAlbumsHandler()
        }
        fatalError("queryAllAlbumsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryAllTagsCallCount = 0
    public var queryAllTagsHandler: (() -> (Result<TagListQuery, ClipStorageError>))?
    public func queryAllTags() -> Result<TagListQuery, ClipStorageError> {
        queryAllTagsCallCount += 1
        if let queryAllTagsHandler = queryAllTagsHandler {
            return queryAllTagsHandler()
        }
        fatalError("queryAllTagsHandler returns can't have a default value thus its handler must be set")
    }
}

public class ClipStorageProtocolMock: ClipStorageProtocol {
    public init() { }
    public init(isInTransaction: Bool = false) {
        self.isInTransaction = isInTransaction
    }

    public private(set) var isInTransactionSetCallCount = 0
    public var isInTransaction: Bool = false { didSet { isInTransactionSetCallCount += 1 } }

    public private(set) var beginTransactionCallCount = 0
    public var beginTransactionHandler: (() throws -> Void)?
    public func beginTransaction() throws {
        beginTransactionCallCount += 1
        if let beginTransactionHandler = beginTransactionHandler {
            try beginTransactionHandler()
        }
    }

    public private(set) var commitTransactionCallCount = 0
    public var commitTransactionHandler: (() throws -> Void)?
    public func commitTransaction() throws {
        commitTransactionCallCount += 1
        if let commitTransactionHandler = commitTransactionHandler {
            try commitTransactionHandler()
        }
    }

    public private(set) var cancelTransactionIfNeededCallCount = 0
    public var cancelTransactionIfNeededHandler: (() throws -> Void)?
    public func cancelTransactionIfNeeded() throws {
        cancelTransactionIfNeededCallCount += 1
        if let cancelTransactionIfNeededHandler = cancelTransactionIfNeededHandler {
            try cancelTransactionIfNeededHandler()
        }
    }

    public private(set) var createCallCount = 0
    public var createHandler: ((Clip, Bool) -> (Result<Clip.Identity, ClipStorageError>))?
    public func create(clip: Clip, forced: Bool) -> Result<Clip.Identity, ClipStorageError> {
        createCallCount += 1
        if let createHandler = createHandler {
            return createHandler(clip, forced)
        }
        fatalError("createHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var createTagWithNameCallCount = 0
    public var createTagWithNameHandler: ((String) -> (Result<Tag, ClipStorageError>))?
    public func create(tagWithName name: String) -> Result<Tag, ClipStorageError> {
        createTagWithNameCallCount += 1
        if let createTagWithNameHandler = createTagWithNameHandler {
            return createTagWithNameHandler(name)
        }
        fatalError("createTagWithNameHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var createAlbumWithTitleCallCount = 0
    public var createAlbumWithTitleHandler: ((String) -> (Result<Album, ClipStorageError>))?
    public func create(albumWithTitle: String) -> Result<Album, ClipStorageError> {
        createAlbumWithTitleCallCount += 1
        if let createAlbumWithTitleHandler = createAlbumWithTitleHandler {
            return createAlbumWithTitleHandler(albumWithTitle)
        }
        fatalError("createAlbumWithTitleHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateClipsCallCount = 0
    public var updateClipsHandler: (([Clip.Identity], Bool) -> (Result<[Clip], ClipStorageError>))?
    public func updateClips(having ids: [Clip.Identity], byHiding: Bool) -> Result<[Clip], ClipStorageError> {
        updateClipsCallCount += 1
        if let updateClipsHandler = updateClipsHandler {
            return updateClipsHandler(ids, byHiding)
        }
        fatalError("updateClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateClipsHavingCallCount = 0
    public var updateClipsHavingHandler: (([Clip.Identity], [Tag.Identity]) -> (Result<[Clip], ClipStorageError>))?
    public func updateClips(having clipIds: [Clip.Identity], byAddingTagsHaving tagIds: [Tag.Identity]) -> Result<[Clip], ClipStorageError> {
        updateClipsHavingCallCount += 1
        if let updateClipsHavingHandler = updateClipsHavingHandler {
            return updateClipsHavingHandler(clipIds, tagIds)
        }
        fatalError("updateClipsHavingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateClipsHavingByDeletingTagsHavingCallCount = 0
    public var updateClipsHavingByDeletingTagsHavingHandler: (([Clip.Identity], [Tag.Identity]) -> (Result<[Clip], ClipStorageError>))?
    public func updateClips(having clipIds: [Clip.Identity], byDeletingTagsHaving tagIds: [Tag.Identity]) -> Result<[Clip], ClipStorageError> {
        updateClipsHavingByDeletingTagsHavingCallCount += 1
        if let updateClipsHavingByDeletingTagsHavingHandler = updateClipsHavingByDeletingTagsHavingHandler {
            return updateClipsHavingByDeletingTagsHavingHandler(clipIds, tagIds)
        }
        fatalError("updateClipsHavingByDeletingTagsHavingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateClipsHavingByReplacingTagsHavingCallCount = 0
    public var updateClipsHavingByReplacingTagsHavingHandler: (([Clip.Identity], [Tag.Identity]) -> (Result<[Clip], ClipStorageError>))?
    public func updateClips(having clipIds: [Clip.Identity], byReplacingTagsHaving tagIds: [Tag.Identity]) -> Result<[Clip], ClipStorageError> {
        updateClipsHavingByReplacingTagsHavingCallCount += 1
        if let updateClipsHavingByReplacingTagsHavingHandler = updateClipsHavingByReplacingTagsHavingHandler {
            return updateClipsHavingByReplacingTagsHavingHandler(clipIds, tagIds)
        }
        fatalError("updateClipsHavingByReplacingTagsHavingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateAlbumCallCount = 0
    public var updateAlbumHandler: ((Album.Identity, [Clip.Identity]) -> (Result<Void, ClipStorageError>))?
    public func updateAlbum(having albumId: Album.Identity, byAddingClipsHaving clipIds: [Clip.Identity]) -> Result<Void, ClipStorageError> {
        updateAlbumCallCount += 1
        if let updateAlbumHandler = updateAlbumHandler {
            return updateAlbumHandler(albumId, clipIds)
        }
        fatalError("updateAlbumHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateAlbumHavingCallCount = 0
    public var updateAlbumHavingHandler: ((Album.Identity, [Clip.Identity]) -> (Result<Void, ClipStorageError>))?
    public func updateAlbum(having albumId: Album.Identity, byDeletingClipsHaving clipIds: [Clip.Identity]) -> Result<Void, ClipStorageError> {
        updateAlbumHavingCallCount += 1
        if let updateAlbumHavingHandler = updateAlbumHavingHandler {
            return updateAlbumHavingHandler(albumId, clipIds)
        }
        fatalError("updateAlbumHavingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateAlbumHavingTitleToCallCount = 0
    public var updateAlbumHavingTitleToHandler: ((Album.Identity, String) -> (Result<Album, ClipStorageError>))?
    public func updateAlbum(having albumId: Album.Identity, titleTo title: String) -> Result<Album, ClipStorageError> {
        updateAlbumHavingTitleToCallCount += 1
        if let updateAlbumHavingTitleToHandler = updateAlbumHavingTitleToHandler {
            return updateAlbumHavingTitleToHandler(albumId, title)
        }
        fatalError("updateAlbumHavingTitleToHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateTagCallCount = 0
    public var updateTagHandler: ((Tag.Identity, String) -> (Result<Tag, ClipStorageError>))?
    public func updateTag(having id: Tag.Identity, nameTo name: String) -> Result<Tag, ClipStorageError> {
        updateTagCallCount += 1
        if let updateTagHandler = updateTagHandler {
            return updateTagHandler(id, name)
        }
        fatalError("updateTagHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var deleteClipsCallCount = 0
    public var deleteClipsHandler: (([Clip.Identity]) -> (Result<[Clip], ClipStorageError>))?
    public func deleteClips(having ids: [Clip.Identity]) -> Result<[Clip], ClipStorageError> {
        deleteClipsCallCount += 1
        if let deleteClipsHandler = deleteClipsHandler {
            return deleteClipsHandler(ids)
        }
        fatalError("deleteClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var deleteClipItemCallCount = 0
    public var deleteClipItemHandler: ((ClipItem.Identity) -> (Result<ClipItem, ClipStorageError>))?
    public func deleteClipItem(having id: ClipItem.Identity) -> Result<ClipItem, ClipStorageError> {
        deleteClipItemCallCount += 1
        if let deleteClipItemHandler = deleteClipItemHandler {
            return deleteClipItemHandler(id)
        }
        fatalError("deleteClipItemHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var deleteAlbumCallCount = 0
    public var deleteAlbumHandler: ((Album.Identity) -> (Result<Album, ClipStorageError>))?
    public func deleteAlbum(having id: Album.Identity) -> Result<Album, ClipStorageError> {
        deleteAlbumCallCount += 1
        if let deleteAlbumHandler = deleteAlbumHandler {
            return deleteAlbumHandler(id)
        }
        fatalError("deleteAlbumHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var deleteTagsCallCount = 0
    public var deleteTagsHandler: (([Tag.Identity]) -> (Result<[Tag], ClipStorageError>))?
    public func deleteTags(having ids: [Tag.Identity]) -> Result<[Tag], ClipStorageError> {
        deleteTagsCallCount += 1
        if let deleteTagsHandler = deleteTagsHandler {
            return deleteTagsHandler(ids)
        }
        fatalError("deleteTagsHandler returns can't have a default value thus its handler must be set")
    }
}

public class ImageStorageProtocolMock: ImageStorageProtocol {
    public init() { }

    public private(set) var imageFileExistsCallCount = 0
    public var imageFileExistsHandler: ((String, Clip.Identity) -> (Bool))?
    public func imageFileExists(named name: String, inClipHaving clipId: Clip.Identity) -> Bool {
        imageFileExistsCallCount += 1
        if let imageFileExistsHandler = imageFileExistsHandler {
            return imageFileExistsHandler(name, clipId)
        }
        return false
    }

    public private(set) var saveCallCount = 0
    public var saveHandler: ((Data, String, Clip.Identity) throws -> Void)?
    public func save(_ image: Data, asName fileName: String, inClipHaving clipId: Clip.Identity) throws {
        saveCallCount += 1
        if let saveHandler = saveHandler {
            try saveHandler(image, fileName, clipId)
        }
    }

    public private(set) var deleteCallCount = 0
    public var deleteHandler: ((String, Clip.Identity) throws -> Void)?
    public func delete(fileName: String, inClipHaving clipId: Clip.Identity) throws {
        deleteCallCount += 1
        if let deleteHandler = deleteHandler {
            try deleteHandler(fileName, clipId)
        }
    }

    public private(set) var deleteAllCallCount = 0
    public var deleteAllHandler: ((Clip.Identity) throws -> Void)?
    public func deleteAll(inClipHaving clipId: Clip.Identity) throws {
        deleteAllCallCount += 1
        if let deleteAllHandler = deleteAllHandler {
            try deleteAllHandler(clipId)
        }
    }

    public private(set) var readImageCallCount = 0
    public var readImageHandler: ((String, Clip.Identity) throws -> (Data?))?
    public func readImage(named name: String, inClipHaving clipId: Clip.Identity) throws -> Data? {
        readImageCallCount += 1
        if let readImageHandler = readImageHandler {
            return try readImageHandler(name, clipId)
        }
        return nil
    }

    public private(set) var resolveImageFileUrlCallCount = 0
    public var resolveImageFileUrlHandler: ((String, Clip.Identity) throws -> (URL?))?
    public func resolveImageFileUrl(named name: String, inClipHaving clipId: Clip.Identity) throws -> URL? {
        resolveImageFileUrlCallCount += 1
        if let resolveImageFileUrlHandler = resolveImageFileUrlHandler {
            return try resolveImageFileUrlHandler(name, clipId)
        }
        return nil
    }
}

public class ThumbnailStorageProtocolMock: ThumbnailStorageProtocol {
    public init() { }

    public private(set) var clearCacheCallCount = 0
    public var clearCacheHandler: (() -> Void)?
    public func clearCache() {
        clearCacheCallCount += 1
        if let clearCacheHandler = clearCacheHandler {
            clearCacheHandler()
        }
    }

    public private(set) var readThumbnailIfExistsCallCount = 0
    public var readThumbnailIfExistsHandler: ((ClipItem) -> (UIImage?))?
    public func readThumbnailIfExists(for item: ClipItem) -> UIImage? {
        readThumbnailIfExistsCallCount += 1
        if let readThumbnailIfExistsHandler = readThumbnailIfExistsHandler {
            return readThumbnailIfExistsHandler(item)
        }
        return nil
    }

    public private(set) var requestThumbnailCallCount = 0
    public var requestThumbnailHandler: ((ClipItem, @escaping (UIImage?) -> Void) -> Void)?
    public func requestThumbnail(for item: ClipItem, completion: @escaping (UIImage?) -> Void) {
        requestThumbnailCallCount += 1
        if let requestThumbnailHandler = requestThumbnailHandler {
            requestThumbnailHandler(item, completion)
        }
    }

    public private(set) var deleteThumbnailCacheIfExistsCallCount = 0
    public var deleteThumbnailCacheIfExistsHandler: ((ClipItem) -> Void)?
    public func deleteThumbnailCacheIfExists(for item: ClipItem) {
        deleteThumbnailCacheIfExistsCallCount += 1
        if let deleteThumbnailCacheIfExistsHandler = deleteThumbnailCacheIfExistsHandler {
            deleteThumbnailCacheIfExistsHandler(item)
        }
    }
}

public class AlbumListQueryMock: AlbumListQuery {
    public init() { }
    public init(albums: CurrentValueSubject<[Album], Error>) {
        self._albums = albums
    }

    public private(set) var albumsSetCallCount = 0
    private var _albums: CurrentValueSubject<[Album], Error>! { didSet { albumsSetCallCount += 1 } }
    public var albums: CurrentValueSubject<[Album], Error> {
        get { return _albums }
        set { _albums = newValue }
    }
}

public class AlbumQueryMock: AlbumQuery {
    public init() { }
    public init(album: CurrentValueSubject<Album, Error>) {
        self._album = album
    }

    public private(set) var albumSetCallCount = 0
    private var _album: CurrentValueSubject<Album, Error>! { didSet { albumSetCallCount += 1 } }
    public var album: CurrentValueSubject<Album, Error> {
        get { return _album }
        set { _album = newValue }
    }
}

public class ClipItemQueryMock: ClipItemQuery {
    public init() { }
    public init(clipItem: CurrentValueSubject<ClipItem, Error>) {
        self._clipItem = clipItem
    }

    public private(set) var clipItemSetCallCount = 0
    private var _clipItem: CurrentValueSubject<ClipItem, Error>! { didSet { clipItemSetCallCount += 1 } }
    public var clipItem: CurrentValueSubject<ClipItem, Error> {
        get { return _clipItem }
        set { _clipItem = newValue }
    }
}

public class ClipListQueryMock: ClipListQuery {
    public init() { }
    public init(clips: CurrentValueSubject<[Clip], Error>) {
        self._clips = clips
    }

    public private(set) var clipsSetCallCount = 0
    private var _clips: CurrentValueSubject<[Clip], Error>! { didSet { clipsSetCallCount += 1 } }
    public var clips: CurrentValueSubject<[Clip], Error> {
        get { return _clips }
        set { _clips = newValue }
    }
}

public class ClipQueryMock: ClipQuery {
    public init() { }
    public init(clip: CurrentValueSubject<Clip, Error>) {
        self._clip = clip
    }

    public private(set) var clipSetCallCount = 0
    private var _clip: CurrentValueSubject<Clip, Error>! { didSet { clipSetCallCount += 1 } }
    public var clip: CurrentValueSubject<Clip, Error> {
        get { return _clip }
        set { _clip = newValue }
    }
}

public class TagListQueryMock: TagListQuery {
    public init() { }
    public init(tags: CurrentValueSubject<[Tag], Error>) {
        self._tags = tags
    }

    public private(set) var tagsSetCallCount = 0
    private var _tags: CurrentValueSubject<[Tag], Error>! { didSet { tagsSetCallCount += 1 } }
    public var tags: CurrentValueSubject<[Tag], Error> {
        get { return _tags }
        set { _tags = newValue }
    }
}

public class TagQueryMock: TagQuery {
    public init() { }
    public init(tag: CurrentValueSubject<Tag, Error>) {
        self._tag = tag
    }

    public private(set) var tagSetCallCount = 0
    private var _tag: CurrentValueSubject<Tag, Error>! { didSet { tagSetCallCount += 1 } }
    public var tag: CurrentValueSubject<Tag, Error> {
        get { return _tag }
        set { _tag = newValue }
    }
}

public class WebImageProviderMock: WebImageProvider {
    public init() { }

    public private(set) static var isProvidingCallCount = 0
    public static var isProvidingHandler: ((URL) -> (Bool))?
    public static func isProviding(url: URL) -> Bool {
        isProvidingCallCount += 1
        if let isProvidingHandler = isProvidingHandler {
            return isProvidingHandler(url)
        }
        return false
    }

    public private(set) static var modifyUrlForProcessingCallCount = 0
    public static var modifyUrlForProcessingHandler: ((URL) -> (URL))?
    public static func modifyUrlForProcessing(_ url: URL) -> URL {
        modifyUrlForProcessingCallCount += 1
        if let modifyUrlForProcessingHandler = modifyUrlForProcessingHandler {
            return modifyUrlForProcessingHandler(url)
        }
        return URL(fileURLWithPath: "")
    }

    public private(set) static var shouldPreprocessCallCount = 0
    public static var shouldPreprocessHandler: ((URL) -> (Bool))?
    public static func shouldPreprocess(for url: URL) -> Bool {
        shouldPreprocessCallCount += 1
        if let shouldPreprocessHandler = shouldPreprocessHandler {
            return shouldPreprocessHandler(url)
        }
        return false
    }

    public private(set) static var preprocessCallCount = 0
    public static var preprocessHandler: ((Erik, Document) -> (AnyPublisher<Void, WebImageUrlFinderError>))?
    public static func preprocess(_ browser: Erik, document: Document) -> AnyPublisher<Void, WebImageUrlFinderError> {
        preprocessCallCount += 1
        if let preprocessHandler = preprocessHandler {
            return preprocessHandler(browser, document)
        }
        fatalError("preprocessHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) static var resolveHighQualityImageUrlCallCount = 0
    public static var resolveHighQualityImageUrlHandler: ((URL) -> (URL?))?
    public static func resolveHighQualityImageUrl(of url: URL) -> URL? {
        resolveHighQualityImageUrlCallCount += 1
        if let resolveHighQualityImageUrlHandler = resolveHighQualityImageUrlHandler {
            return resolveHighQualityImageUrlHandler(url)
        }
        return nil
    }

    public private(set) static var shouldModifyRequestCallCount = 0
    public static var shouldModifyRequestHandler: ((URL) -> (Bool))?
    public static func shouldModifyRequest(for url: URL) -> Bool {
        shouldModifyRequestCallCount += 1
        if let shouldModifyRequestHandler = shouldModifyRequestHandler {
            return shouldModifyRequestHandler(url)
        }
        return false
    }

    public private(set) static var modifyRequestCallCount = 0
    public static var modifyRequestHandler: ((URLRequest) -> (URLRequest))?
    public static func modifyRequest(_ request: URLRequest) -> URLRequest {
        modifyRequestCallCount += 1
        if let modifyRequestHandler = modifyRequestHandler {
            return modifyRequestHandler(request)
        }
        fatalError("modifyRequestHandler returns can't have a default value thus its handler must be set")
    }
}

public class WebImageUrlFinderProtocolMock: WebImageUrlFinderProtocol {
    public init() { }
    public init(webView: WKWebView) {
        self._webView = webView
    }

    public private(set) var webViewSetCallCount = 0
    private var _webView: WKWebView! { didSet { webViewSetCallCount += 1 } }
    public var webView: WKWebView {
        get { return _webView }
        set { _webView = newValue }
    }

    public private(set) var findImageUrlsCallCount = 0
    public var findImageUrlsHandler: ((URL, Int, @escaping (Swift.Result<[URL], WebImageUrlFinderError>) -> Void) -> Void)?
    public func findImageUrls(inWebSiteAt url: URL, delay milliseconds: Int, completion: @escaping (Swift.Result<[URL], WebImageUrlFinderError>) -> Void) {
        findImageUrlsCallCount += 1
        if let findImageUrlsHandler = findImageUrlsHandler {
            findImageUrlsHandler(url, milliseconds, completion)
        }
    }
}
