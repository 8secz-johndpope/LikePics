///
/// @Generated by Mockolo
///

import Combine
@testable import Domain
import UIKit

public class ClipCommandServiceProtocolMock: ClipCommandServiceProtocol {
    public init() { }

    public private(set) var createCallCount = 0
    public var createHandler: ((Clip, [(fileName: String, image: Data)], Bool) -> (Result<Void, ClipStorageError>))?
    public func create(clip: Clip, withData data: [(fileName: String, image: Data)], forced: Bool) -> Result<Void, ClipStorageError> {
        createCallCount += 1
        if let createHandler = createHandler {
            return createHandler(clip, data, forced)
        }
        fatalError("createHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var createTagWithNameCallCount = 0
    public var createTagWithNameHandler: ((String) -> (Result<Void, ClipStorageError>))?
    public func create(tagWithName name: String) -> Result<Void, ClipStorageError> {
        createTagWithNameCallCount += 1
        if let createTagWithNameHandler = createTagWithNameHandler {
            return createTagWithNameHandler(name)
        }
        fatalError("createTagWithNameHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var createAlbumWithTitleCallCount = 0
    public var createAlbumWithTitleHandler: ((String) -> (Result<Void, ClipStorageError>))?
    public func create(albumWithTitle: String) -> Result<Void, ClipStorageError> {
        createAlbumWithTitleCallCount += 1
        if let createAlbumWithTitleHandler = createAlbumWithTitleHandler {
            return createAlbumWithTitleHandler(albumWithTitle)
        }
        fatalError("createAlbumWithTitleHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateClipsCallCount = 0
    public var updateClipsHandler: (([Clip.Identity], Bool) -> (Result<Void, ClipStorageError>))?
    public func updateClips(having ids: [Clip.Identity], byHiding: Bool) -> Result<Void, ClipStorageError> {
        updateClipsCallCount += 1
        if let updateClipsHandler = updateClipsHandler {
            return updateClipsHandler(ids, byHiding)
        }
        fatalError("updateClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateClipsHavingCallCount = 0
    public var updateClipsHavingHandler: (([Clip.Identity], [Tag.Identity]) -> (Result<Void, ClipStorageError>))?
    public func updateClips(having clipIds: [Clip.Identity], byAddingTagsHaving tagIds: [Tag.Identity]) -> Result<Void, ClipStorageError> {
        updateClipsHavingCallCount += 1
        if let updateClipsHavingHandler = updateClipsHavingHandler {
            return updateClipsHavingHandler(clipIds, tagIds)
        }
        fatalError("updateClipsHavingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateClipsHavingByDeletingTagsHavingCallCount = 0
    public var updateClipsHavingByDeletingTagsHavingHandler: (([Clip.Identity], [Tag.Identity]) -> (Result<Void, ClipStorageError>))?
    public func updateClips(having clipIds: [Clip.Identity], byDeletingTagsHaving tagIds: [Tag.Identity]) -> Result<Void, ClipStorageError> {
        updateClipsHavingByDeletingTagsHavingCallCount += 1
        if let updateClipsHavingByDeletingTagsHavingHandler = updateClipsHavingByDeletingTagsHavingHandler {
            return updateClipsHavingByDeletingTagsHavingHandler(clipIds, tagIds)
        }
        fatalError("updateClipsHavingByDeletingTagsHavingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateClipsHavingByReplacingTagsHavingCallCount = 0
    public var updateClipsHavingByReplacingTagsHavingHandler: (([Clip.Identity], [Tag.Identity]) -> (Result<Void, ClipStorageError>))?
    public func updateClips(having clipIds: [Clip.Identity], byReplacingTagsHaving tagIds: [Tag.Identity]) -> Result<Void, ClipStorageError> {
        updateClipsHavingByReplacingTagsHavingCallCount += 1
        if let updateClipsHavingByReplacingTagsHavingHandler = updateClipsHavingByReplacingTagsHavingHandler {
            return updateClipsHavingByReplacingTagsHavingHandler(clipIds, tagIds)
        }
        fatalError("updateClipsHavingByReplacingTagsHavingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateAlbumCallCount = 0
    public var updateAlbumHandler: ((Album.Identity, [Clip.Identity]) -> (Result<Void, ClipStorageError>))?
    public func updateAlbum(having albumId: Album.Identity, byAddingClipsHaving clipIds: [Clip.Identity]) -> Result<Void, ClipStorageError> {
        updateAlbumCallCount += 1
        if let updateAlbumHandler = updateAlbumHandler {
            return updateAlbumHandler(albumId, clipIds)
        }
        fatalError("updateAlbumHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateAlbumHavingCallCount = 0
    public var updateAlbumHavingHandler: ((Album.Identity, [Clip.Identity]) -> (Result<Void, ClipStorageError>))?
    public func updateAlbum(having albumId: Album.Identity, byDeletingClipsHaving clipIds: [Clip.Identity]) -> Result<Void, ClipStorageError> {
        updateAlbumHavingCallCount += 1
        if let updateAlbumHavingHandler = updateAlbumHavingHandler {
            return updateAlbumHavingHandler(albumId, clipIds)
        }
        fatalError("updateAlbumHavingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateAlbumHavingTitleToCallCount = 0
    public var updateAlbumHavingTitleToHandler: ((Album.Identity, String) -> (Result<Void, ClipStorageError>))?
    public func updateAlbum(having albumId: Album.Identity, titleTo title: String) -> Result<Void, ClipStorageError> {
        updateAlbumHavingTitleToCallCount += 1
        if let updateAlbumHavingTitleToHandler = updateAlbumHavingTitleToHandler {
            return updateAlbumHavingTitleToHandler(albumId, title)
        }
        fatalError("updateAlbumHavingTitleToHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateTagCallCount = 0
    public var updateTagHandler: ((Tag.Identity, String) -> (Result<Void, ClipStorageError>))?
    public func updateTag(having id: Tag.Identity, nameTo name: String) -> Result<Void, ClipStorageError> {
        updateTagCallCount += 1
        if let updateTagHandler = updateTagHandler {
            return updateTagHandler(id, name)
        }
        fatalError("updateTagHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var deleteClipsCallCount = 0
    public var deleteClipsHandler: (([Clip.Identity]) -> (Result<Void, ClipStorageError>))?
    public func deleteClips(having ids: [Clip.Identity]) -> Result<Void, ClipStorageError> {
        deleteClipsCallCount += 1
        if let deleteClipsHandler = deleteClipsHandler {
            return deleteClipsHandler(ids)
        }
        fatalError("deleteClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var deleteClipItemCallCount = 0
    public var deleteClipItemHandler: ((ClipItem.Identity) -> (Result<Void, ClipStorageError>))?
    public func deleteClipItem(having id: ClipItem.Identity) -> Result<Void, ClipStorageError> {
        deleteClipItemCallCount += 1
        if let deleteClipItemHandler = deleteClipItemHandler {
            return deleteClipItemHandler(id)
        }
        fatalError("deleteClipItemHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var deleteAlbumCallCount = 0
    public var deleteAlbumHandler: ((Album.Identity) -> (Result<Void, ClipStorageError>))?
    public func deleteAlbum(having id: Album.Identity) -> Result<Void, ClipStorageError> {
        deleteAlbumCallCount += 1
        if let deleteAlbumHandler = deleteAlbumHandler {
            return deleteAlbumHandler(id)
        }
        fatalError("deleteAlbumHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var deleteTagsCallCount = 0
    public var deleteTagsHandler: (([Tag.Identity]) -> (Result<Void, ClipStorageError>))?
    public func deleteTags(having ids: [Tag.Identity]) -> Result<Void, ClipStorageError> {
        deleteTagsCallCount += 1
        if let deleteTagsHandler = deleteTagsHandler {
            return deleteTagsHandler(ids)
        }
        fatalError("deleteTagsHandler returns can't have a default value thus its handler must be set")
    }
}

public class ClipQueryServiceProtocolMock: ClipQueryServiceProtocol {
    public init() { }

    public private(set) var readClipCallCount = 0
    public var readClipHandler: ((URL) -> (Result<Clip?, ClipStorageError>))?
    public func readClip(havingUrl url: URL) -> Result<Clip?, ClipStorageError> {
        readClipCallCount += 1
        if let readClipHandler = readClipHandler {
            return readClipHandler(url)
        }
        fatalError("readClipHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryClipCallCount = 0
    public var queryClipHandler: ((Clip.Identity) -> (Result<ClipQuery, ClipStorageError>))?
    public func queryClip(having id: Clip.Identity) -> Result<ClipQuery, ClipStorageError> {
        queryClipCallCount += 1
        if let queryClipHandler = queryClipHandler {
            return queryClipHandler(id)
        }
        fatalError("queryClipHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryAllClipsCallCount = 0
    public var queryAllClipsHandler: (() -> (Result<ClipListQuery, ClipStorageError>))?
    public func queryAllClips() -> Result<ClipListQuery, ClipStorageError> {
        queryAllClipsCallCount += 1
        if let queryAllClipsHandler = queryAllClipsHandler {
            return queryAllClipsHandler()
        }
        fatalError("queryAllClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryUncategorizedClipsCallCount = 0
    public var queryUncategorizedClipsHandler: (() -> (Result<ClipListQuery, ClipStorageError>))?
    public func queryUncategorizedClips() -> Result<ClipListQuery, ClipStorageError> {
        queryUncategorizedClipsCallCount += 1
        if let queryUncategorizedClipsHandler = queryUncategorizedClipsHandler {
            return queryUncategorizedClipsHandler()
        }
        fatalError("queryUncategorizedClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryClipsCallCount = 0
    public var queryClipsHandler: (([String]) -> (Result<ClipListQuery, ClipStorageError>))?
    public func queryClips(matchingKeywords keywords: [String]) -> Result<ClipListQuery, ClipStorageError> {
        queryClipsCallCount += 1
        if let queryClipsHandler = queryClipsHandler {
            return queryClipsHandler(keywords)
        }
        fatalError("queryClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryClipsTaggedCallCount = 0
    public var queryClipsTaggedHandler: ((Tag) -> (Result<ClipListQuery, ClipStorageError>))?
    public func queryClips(tagged tag: Tag) -> Result<ClipListQuery, ClipStorageError> {
        queryClipsTaggedCallCount += 1
        if let queryClipsTaggedHandler = queryClipsTaggedHandler {
            return queryClipsTaggedHandler(tag)
        }
        fatalError("queryClipsTaggedHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryAlbumCallCount = 0
    public var queryAlbumHandler: ((Album.Identity) -> (Result<AlbumQuery, ClipStorageError>))?
    public func queryAlbum(having id: Album.Identity) -> Result<AlbumQuery, ClipStorageError> {
        queryAlbumCallCount += 1
        if let queryAlbumHandler = queryAlbumHandler {
            return queryAlbumHandler(id)
        }
        fatalError("queryAlbumHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryAllAlbumsCallCount = 0
    public var queryAllAlbumsHandler: (() -> (Result<AlbumListQuery, ClipStorageError>))?
    public func queryAllAlbums() -> Result<AlbumListQuery, ClipStorageError> {
        queryAllAlbumsCallCount += 1
        if let queryAllAlbumsHandler = queryAllAlbumsHandler {
            return queryAllAlbumsHandler()
        }
        fatalError("queryAllAlbumsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryAllTagsCallCount = 0
    public var queryAllTagsHandler: (() -> (Result<TagListQuery, ClipStorageError>))?
    public func queryAllTags() -> Result<TagListQuery, ClipStorageError> {
        queryAllTagsCallCount += 1
        if let queryAllTagsHandler = queryAllTagsHandler {
            return queryAllTagsHandler()
        }
        fatalError("queryAllTagsHandler returns can't have a default value thus its handler must be set")
    }
}

public class ClipReferencesIntegrityValidationServiceProtocolMock: ClipReferencesIntegrityValidationServiceProtocol {
    public init() { }

    public private(set) var validateAndFixIntegrityIfNeededCallCount = 0
    public var validateAndFixIntegrityIfNeededHandler: (() -> Void)?
    public func validateAndFixIntegrityIfNeeded() {
        validateAndFixIntegrityIfNeededCallCount += 1
        if let validateAndFixIntegrityIfNeededHandler = validateAndFixIntegrityIfNeededHandler {
            validateAndFixIntegrityIfNeededHandler()
        }
    }
}

public class ClipStorageProtocolMock: ClipStorageProtocol {
    public init() { }
    public init(isInTransaction: Bool = false) {
        self.isInTransaction = isInTransaction
    }

    public private(set) var isInTransactionSetCallCount = 0
    public var isInTransaction: Bool = false { didSet { isInTransactionSetCallCount += 1 } }

    public private(set) var beginTransactionCallCount = 0
    public var beginTransactionHandler: (() throws -> Void)?
    public func beginTransaction() throws {
        beginTransactionCallCount += 1
        if let beginTransactionHandler = beginTransactionHandler {
            try beginTransactionHandler()
        }
    }

    public private(set) var commitTransactionCallCount = 0
    public var commitTransactionHandler: (() throws -> Void)?
    public func commitTransaction() throws {
        commitTransactionCallCount += 1
        if let commitTransactionHandler = commitTransactionHandler {
            try commitTransactionHandler()
        }
    }

    public private(set) var cancelTransactionIfNeededCallCount = 0
    public var cancelTransactionIfNeededHandler: (() throws -> Void)?
    public func cancelTransactionIfNeeded() throws {
        cancelTransactionIfNeededCallCount += 1
        if let cancelTransactionIfNeededHandler = cancelTransactionIfNeededHandler {
            try cancelTransactionIfNeededHandler()
        }
    }

    public private(set) var readAllClipsCallCount = 0
    public var readAllClipsHandler: (() -> (Result<[Clip], ClipStorageError>))?
    public func readAllClips() -> Result<[Clip], ClipStorageError> {
        readAllClipsCallCount += 1
        if let readAllClipsHandler = readAllClipsHandler {
            return readAllClipsHandler()
        }
        fatalError("readAllClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var readAllTagsCallCount = 0
    public var readAllTagsHandler: (() -> (Result<[Tag], ClipStorageError>))?
    public func readAllTags() -> Result<[Tag], ClipStorageError> {
        readAllTagsCallCount += 1
        if let readAllTagsHandler = readAllTagsHandler {
            return readAllTagsHandler()
        }
        fatalError("readAllTagsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var createCallCount = 0
    public var createHandler: ((Clip, Bool, Bool) -> (Result<Clip, ClipStorageError>))?
    public func create(clip: Clip, allowTagCreation: Bool, overwrite: Bool) -> Result<Clip, ClipStorageError> {
        createCallCount += 1
        if let createHandler = createHandler {
            return createHandler(clip, allowTagCreation, overwrite)
        }
        fatalError("createHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var createTagWithNameCallCount = 0
    public var createTagWithNameHandler: ((String) -> (Result<Tag, ClipStorageError>))?
    public func create(tagWithName name: String) -> Result<Tag, ClipStorageError> {
        createTagWithNameCallCount += 1
        if let createTagWithNameHandler = createTagWithNameHandler {
            return createTagWithNameHandler(name)
        }
        fatalError("createTagWithNameHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var createAlbumWithTitleCallCount = 0
    public var createAlbumWithTitleHandler: ((String) -> (Result<Album, ClipStorageError>))?
    public func create(albumWithTitle: String) -> Result<Album, ClipStorageError> {
        createAlbumWithTitleCallCount += 1
        if let createAlbumWithTitleHandler = createAlbumWithTitleHandler {
            return createAlbumWithTitleHandler(albumWithTitle)
        }
        fatalError("createAlbumWithTitleHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateClipsCallCount = 0
    public var updateClipsHandler: (([Clip.Identity], Bool) -> (Result<[Clip], ClipStorageError>))?
    public func updateClips(having ids: [Clip.Identity], byHiding: Bool) -> Result<[Clip], ClipStorageError> {
        updateClipsCallCount += 1
        if let updateClipsHandler = updateClipsHandler {
            return updateClipsHandler(ids, byHiding)
        }
        fatalError("updateClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateClipsHavingCallCount = 0
    public var updateClipsHavingHandler: (([Clip.Identity], [Tag.Identity]) -> (Result<[Clip], ClipStorageError>))?
    public func updateClips(having clipIds: [Clip.Identity], byAddingTagsHaving tagIds: [Tag.Identity]) -> Result<[Clip], ClipStorageError> {
        updateClipsHavingCallCount += 1
        if let updateClipsHavingHandler = updateClipsHavingHandler {
            return updateClipsHavingHandler(clipIds, tagIds)
        }
        fatalError("updateClipsHavingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateClipsHavingByDeletingTagsHavingCallCount = 0
    public var updateClipsHavingByDeletingTagsHavingHandler: (([Clip.Identity], [Tag.Identity]) -> (Result<[Clip], ClipStorageError>))?
    public func updateClips(having clipIds: [Clip.Identity], byDeletingTagsHaving tagIds: [Tag.Identity]) -> Result<[Clip], ClipStorageError> {
        updateClipsHavingByDeletingTagsHavingCallCount += 1
        if let updateClipsHavingByDeletingTagsHavingHandler = updateClipsHavingByDeletingTagsHavingHandler {
            return updateClipsHavingByDeletingTagsHavingHandler(clipIds, tagIds)
        }
        fatalError("updateClipsHavingByDeletingTagsHavingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateClipsHavingByReplacingTagsHavingCallCount = 0
    public var updateClipsHavingByReplacingTagsHavingHandler: (([Clip.Identity], [Tag.Identity]) -> (Result<[Clip], ClipStorageError>))?
    public func updateClips(having clipIds: [Clip.Identity], byReplacingTagsHaving tagIds: [Tag.Identity]) -> Result<[Clip], ClipStorageError> {
        updateClipsHavingByReplacingTagsHavingCallCount += 1
        if let updateClipsHavingByReplacingTagsHavingHandler = updateClipsHavingByReplacingTagsHavingHandler {
            return updateClipsHavingByReplacingTagsHavingHandler(clipIds, tagIds)
        }
        fatalError("updateClipsHavingByReplacingTagsHavingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateAlbumCallCount = 0
    public var updateAlbumHandler: ((Album.Identity, [Clip.Identity]) -> (Result<Void, ClipStorageError>))?
    public func updateAlbum(having albumId: Album.Identity, byAddingClipsHaving clipIds: [Clip.Identity]) -> Result<Void, ClipStorageError> {
        updateAlbumCallCount += 1
        if let updateAlbumHandler = updateAlbumHandler {
            return updateAlbumHandler(albumId, clipIds)
        }
        fatalError("updateAlbumHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateAlbumHavingCallCount = 0
    public var updateAlbumHavingHandler: ((Album.Identity, [Clip.Identity]) -> (Result<Void, ClipStorageError>))?
    public func updateAlbum(having albumId: Album.Identity, byDeletingClipsHaving clipIds: [Clip.Identity]) -> Result<Void, ClipStorageError> {
        updateAlbumHavingCallCount += 1
        if let updateAlbumHavingHandler = updateAlbumHavingHandler {
            return updateAlbumHavingHandler(albumId, clipIds)
        }
        fatalError("updateAlbumHavingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateAlbumHavingTitleToCallCount = 0
    public var updateAlbumHavingTitleToHandler: ((Album.Identity, String) -> (Result<Album, ClipStorageError>))?
    public func updateAlbum(having albumId: Album.Identity, titleTo title: String) -> Result<Album, ClipStorageError> {
        updateAlbumHavingTitleToCallCount += 1
        if let updateAlbumHavingTitleToHandler = updateAlbumHavingTitleToHandler {
            return updateAlbumHavingTitleToHandler(albumId, title)
        }
        fatalError("updateAlbumHavingTitleToHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateTagCallCount = 0
    public var updateTagHandler: ((Tag.Identity, String) -> (Result<Tag, ClipStorageError>))?
    public func updateTag(having id: Tag.Identity, nameTo name: String) -> Result<Tag, ClipStorageError> {
        updateTagCallCount += 1
        if let updateTagHandler = updateTagHandler {
            return updateTagHandler(id, name)
        }
        fatalError("updateTagHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var deleteClipsCallCount = 0
    public var deleteClipsHandler: (([Clip.Identity]) -> (Result<[Clip], ClipStorageError>))?
    public func deleteClips(having ids: [Clip.Identity]) -> Result<[Clip], ClipStorageError> {
        deleteClipsCallCount += 1
        if let deleteClipsHandler = deleteClipsHandler {
            return deleteClipsHandler(ids)
        }
        fatalError("deleteClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var deleteClipItemCallCount = 0
    public var deleteClipItemHandler: ((ClipItem.Identity) -> (Result<ClipItem, ClipStorageError>))?
    public func deleteClipItem(having id: ClipItem.Identity) -> Result<ClipItem, ClipStorageError> {
        deleteClipItemCallCount += 1
        if let deleteClipItemHandler = deleteClipItemHandler {
            return deleteClipItemHandler(id)
        }
        fatalError("deleteClipItemHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var deleteAlbumCallCount = 0
    public var deleteAlbumHandler: ((Album.Identity) -> (Result<Album, ClipStorageError>))?
    public func deleteAlbum(having id: Album.Identity) -> Result<Album, ClipStorageError> {
        deleteAlbumCallCount += 1
        if let deleteAlbumHandler = deleteAlbumHandler {
            return deleteAlbumHandler(id)
        }
        fatalError("deleteAlbumHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var deleteTagsCallCount = 0
    public var deleteTagsHandler: (([Tag.Identity]) -> (Result<[Tag], ClipStorageError>))?
    public func deleteTags(having ids: [Tag.Identity]) -> Result<[Tag], ClipStorageError> {
        deleteTagsCallCount += 1
        if let deleteTagsHandler = deleteTagsHandler {
            return deleteTagsHandler(ids)
        }
        fatalError("deleteTagsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var deleteAllCallCount = 0
    public var deleteAllHandler: (() -> (Result<Void, ClipStorageError>))?
    public func deleteAll() -> Result<Void, ClipStorageError> {
        deleteAllCallCount += 1
        if let deleteAllHandler = deleteAllHandler {
            return deleteAllHandler()
        }
        fatalError("deleteAllHandler returns can't have a default value thus its handler must be set")
    }
}

public class ImageStorageProtocolMock: ImageStorageProtocol {
    public init() { }

    public private(set) var imageFileExistsCallCount = 0
    public var imageFileExistsHandler: ((String, Clip.Identity) -> (Bool))?
    public func imageFileExists(named name: String, inClipHaving clipId: Clip.Identity) -> Bool {
        imageFileExistsCallCount += 1
        if let imageFileExistsHandler = imageFileExistsHandler {
            return imageFileExistsHandler(name, clipId)
        }
        return false
    }

    public private(set) var saveCallCount = 0
    public var saveHandler: ((Data, String, Clip.Identity) throws -> Void)?
    public func save(_ image: Data, asName fileName: String, inClipHaving clipId: Clip.Identity) throws {
        saveCallCount += 1
        if let saveHandler = saveHandler {
            try saveHandler(image, fileName, clipId)
        }
    }

    public private(set) var deleteCallCount = 0
    public var deleteHandler: ((String, Clip.Identity) throws -> Void)?
    public func delete(fileName: String, inClipHaving clipId: Clip.Identity) throws {
        deleteCallCount += 1
        if let deleteHandler = deleteHandler {
            try deleteHandler(fileName, clipId)
        }
    }

    public private(set) var deleteAllCallCount = 0
    public var deleteAllHandler: ((Clip.Identity) throws -> Void)?
    public func deleteAll(inClipHaving clipId: Clip.Identity) throws {
        deleteAllCallCount += 1
        if let deleteAllHandler = deleteAllHandler {
            try deleteAllHandler(clipId)
        }
    }

    public private(set) var deleteAll1CallCount = 0
    public var deleteAll1Handler: (() throws -> Void)?
    public func deleteAll() throws {
        deleteAll1CallCount += 1
        if let deleteAll1Handler = deleteAll1Handler {
            try deleteAll1Handler()
        }
    }

    public private(set) var moveImageFileCallCount = 0
    public var moveImageFileHandler: ((URL, String, Clip.Identity) throws -> Void)?
    public func moveImageFile(at url: URL, withName fileName: String, toClipHaving clipId: Clip.Identity) throws {
        moveImageFileCallCount += 1
        if let moveImageFileHandler = moveImageFileHandler {
            try moveImageFileHandler(url, fileName, clipId)
        }
    }

    public private(set) var readImageCallCount = 0
    public var readImageHandler: ((String, Clip.Identity) throws -> (Data?))?
    public func readImage(named name: String, inClipHaving clipId: Clip.Identity) throws -> Data? {
        readImageCallCount += 1
        if let readImageHandler = readImageHandler {
            return try readImageHandler(name, clipId)
        }
        return nil
    }

    public private(set) var resolveImageFileUrlCallCount = 0
    public var resolveImageFileUrlHandler: ((String, Clip.Identity) throws -> (URL?))?
    public func resolveImageFileUrl(named name: String, inClipHaving clipId: Clip.Identity) throws -> URL? {
        resolveImageFileUrlCallCount += 1
        if let resolveImageFileUrlHandler = resolveImageFileUrlHandler {
            return try resolveImageFileUrlHandler(name, clipId)
        }
        return nil
    }
}

public class ReferenceClipStorageProtocolMock: ReferenceClipStorageProtocol {
    public init() { }
    public init(isInTransaction: Bool = false) {
        self.isInTransaction = isInTransaction
    }

    public private(set) var isInTransactionSetCallCount = 0
    public var isInTransaction: Bool = false { didSet { isInTransactionSetCallCount += 1 } }

    public private(set) var beginTransactionCallCount = 0
    public var beginTransactionHandler: (() throws -> Void)?
    public func beginTransaction() throws {
        beginTransactionCallCount += 1
        if let beginTransactionHandler = beginTransactionHandler {
            try beginTransactionHandler()
        }
    }

    public private(set) var commitTransactionCallCount = 0
    public var commitTransactionHandler: (() throws -> Void)?
    public func commitTransaction() throws {
        commitTransactionCallCount += 1
        if let commitTransactionHandler = commitTransactionHandler {
            try commitTransactionHandler()
        }
    }

    public private(set) var cancelTransactionIfNeededCallCount = 0
    public var cancelTransactionIfNeededHandler: (() throws -> Void)?
    public func cancelTransactionIfNeeded() throws {
        cancelTransactionIfNeededCallCount += 1
        if let cancelTransactionIfNeededHandler = cancelTransactionIfNeededHandler {
            try cancelTransactionIfNeededHandler()
        }
    }

    public private(set) var readAllClipsCallCount = 0
    public var readAllClipsHandler: (() -> (Result<[ReferenceClip], ClipStorageError>))?
    public func readAllClips() -> Result<[ReferenceClip], ClipStorageError> {
        readAllClipsCallCount += 1
        if let readAllClipsHandler = readAllClipsHandler {
            return readAllClipsHandler()
        }
        fatalError("readAllClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var readAllDirtyClipsCallCount = 0
    public var readAllDirtyClipsHandler: (() -> (Result<[ReferenceClip], ClipStorageError>))?
    public func readAllDirtyClips() -> Result<[ReferenceClip], ClipStorageError> {
        readAllDirtyClipsCallCount += 1
        if let readAllDirtyClipsHandler = readAllDirtyClipsHandler {
            return readAllDirtyClipsHandler()
        }
        fatalError("readAllDirtyClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var readAllTagsCallCount = 0
    public var readAllTagsHandler: (() -> (Result<[ReferenceTag], ClipStorageError>))?
    public func readAllTags() -> Result<[ReferenceTag], ClipStorageError> {
        readAllTagsCallCount += 1
        if let readAllTagsHandler = readAllTagsHandler {
            return readAllTagsHandler()
        }
        fatalError("readAllTagsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var readClipCallCount = 0
    public var readClipHandler: ((URL) -> (Result<ReferenceClip?, ClipStorageError>))?
    public func readClip(havingUrl url: URL) -> Result<ReferenceClip?, ClipStorageError> {
        readClipCallCount += 1
        if let readClipHandler = readClipHandler {
            return readClipHandler(url)
        }
        fatalError("readClipHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var createCallCount = 0
    public var createHandler: ((ReferenceClip) -> (Result<Void, ClipStorageError>))?
    public func create(clip: ReferenceClip) -> Result<Void, ClipStorageError> {
        createCallCount += 1
        if let createHandler = createHandler {
            return createHandler(clip)
        }
        fatalError("createHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var createTagCallCount = 0
    public var createTagHandler: ((ReferenceTag) -> (Result<Void, ClipStorageError>))?
    public func create(tag: ReferenceTag) -> Result<Void, ClipStorageError> {
        createTagCallCount += 1
        if let createTagHandler = createTagHandler {
            return createTagHandler(tag)
        }
        fatalError("createTagHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateTagCallCount = 0
    public var updateTagHandler: ((ReferenceTag.Identity, String) -> (Result<Void, ClipStorageError>))?
    public func updateTag(having id: ReferenceTag.Identity, nameTo name: String) -> Result<Void, ClipStorageError> {
        updateTagCallCount += 1
        if let updateTagHandler = updateTagHandler {
            return updateTagHandler(id, name)
        }
        fatalError("updateTagHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateClipsCallCount = 0
    public var updateClipsHandler: (([ReferenceClip.Identity], [ReferenceTag.Identity]) -> (Result<Void, ClipStorageError>))?
    public func updateClips(having clipIds: [ReferenceClip.Identity], byAddingTagsHaving tagIds: [ReferenceTag.Identity]) -> Result<Void, ClipStorageError> {
        updateClipsCallCount += 1
        if let updateClipsHandler = updateClipsHandler {
            return updateClipsHandler(clipIds, tagIds)
        }
        fatalError("updateClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateClipsHavingCallCount = 0
    public var updateClipsHavingHandler: (([ReferenceClip.Identity], [ReferenceTag.Identity]) -> (Result<Void, ClipStorageError>))?
    public func updateClips(having clipIds: [ReferenceClip.Identity], byDeletingTagsHaving tagIds: [ReferenceTag.Identity]) -> Result<Void, ClipStorageError> {
        updateClipsHavingCallCount += 1
        if let updateClipsHavingHandler = updateClipsHavingHandler {
            return updateClipsHavingHandler(clipIds, tagIds)
        }
        fatalError("updateClipsHavingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateClipsHavingByReplacingTagsHavingCallCount = 0
    public var updateClipsHavingByReplacingTagsHavingHandler: (([ReferenceClip.Identity], [ReferenceTag.Identity]) -> (Result<Void, ClipStorageError>))?
    public func updateClips(having clipIds: [ReferenceClip.Identity], byReplacingTagsHaving tagIds: [ReferenceTag.Identity]) -> Result<Void, ClipStorageError> {
        updateClipsHavingByReplacingTagsHavingCallCount += 1
        if let updateClipsHavingByReplacingTagsHavingHandler = updateClipsHavingByReplacingTagsHavingHandler {
            return updateClipsHavingByReplacingTagsHavingHandler(clipIds, tagIds)
        }
        fatalError("updateClipsHavingByReplacingTagsHavingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateClipsHavingByUpdatingDirtyCallCount = 0
    public var updateClipsHavingByUpdatingDirtyHandler: (([ReferenceClip.Identity], Bool) -> (Result<Void, ClipStorageError>))?
    public func updateClips(having clipIds: [ReferenceClip.Identity], byUpdatingDirty isDirty: Bool) -> Result<Void, ClipStorageError> {
        updateClipsHavingByUpdatingDirtyCallCount += 1
        if let updateClipsHavingByUpdatingDirtyHandler = updateClipsHavingByUpdatingDirtyHandler {
            return updateClipsHavingByUpdatingDirtyHandler(clipIds, isDirty)
        }
        fatalError("updateClipsHavingByUpdatingDirtyHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var cleanAllClipsCallCount = 0
    public var cleanAllClipsHandler: (() -> (Result<Void, ClipStorageError>))?
    public func cleanAllClips() -> Result<Void, ClipStorageError> {
        cleanAllClipsCallCount += 1
        if let cleanAllClipsHandler = cleanAllClipsHandler {
            return cleanAllClipsHandler()
        }
        fatalError("cleanAllClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var deleteClipsCallCount = 0
    public var deleteClipsHandler: (([ReferenceClip.Identity]) -> (Result<Void, ClipStorageError>))?
    public func deleteClips(having ids: [ReferenceClip.Identity]) -> Result<Void, ClipStorageError> {
        deleteClipsCallCount += 1
        if let deleteClipsHandler = deleteClipsHandler {
            return deleteClipsHandler(ids)
        }
        fatalError("deleteClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var deleteTagsCallCount = 0
    public var deleteTagsHandler: (([ReferenceTag.Identity]) -> (Result<Void, ClipStorageError>))?
    public func deleteTags(having ids: [ReferenceTag.Identity]) -> Result<Void, ClipStorageError> {
        deleteTagsCallCount += 1
        if let deleteTagsHandler = deleteTagsHandler {
            return deleteTagsHandler(ids)
        }
        fatalError("deleteTagsHandler returns can't have a default value thus its handler must be set")
    }
}

public class TemporaryClipCommandServiceProtocolMock: TemporaryClipCommandServiceProtocol {
    public init() { }

    public private(set) var createCallCount = 0
    public var createHandler: ((Clip, [(fileName: String, image: Data)], Bool) -> (Result<Void, ClipStorageError>))?
    public func create(clip: Clip, withData data: [(fileName: String, image: Data)], forced: Bool) -> Result<Void, ClipStorageError> {
        createCallCount += 1
        if let createHandler = createHandler {
            return createHandler(clip, data, forced)
        }
        fatalError("createHandler returns can't have a default value thus its handler must be set")
    }
}

public class TemporaryClipsPersistServiceProtocolMock: TemporaryClipsPersistServiceProtocol {
    public init() { }

    public private(set) var persistIfNeededCallCount = 0
    public var persistIfNeededHandler: (() -> (Bool))?
    public func persistIfNeeded() -> Bool {
        persistIfNeededCallCount += 1
        if let persistIfNeededHandler = persistIfNeededHandler {
            return persistIfNeededHandler()
        }
        return false
    }
}

public class ThumbnailStorageProtocolMock: ThumbnailStorageProtocol {
    public init() { }

    public private(set) var clearCacheCallCount = 0
    public var clearCacheHandler: (() -> Void)?
    public func clearCache() {
        clearCacheCallCount += 1
        if let clearCacheHandler = clearCacheHandler {
            clearCacheHandler()
        }
    }

    public private(set) var readThumbnailIfExistsCallCount = 0
    public var readThumbnailIfExistsHandler: ((ClipItem) -> (UIImage?))?
    public func readThumbnailIfExists(for item: ClipItem) -> UIImage? {
        readThumbnailIfExistsCallCount += 1
        if let readThumbnailIfExistsHandler = readThumbnailIfExistsHandler {
            return readThumbnailIfExistsHandler(item)
        }
        return nil
    }

    public private(set) var requestThumbnailCallCount = 0
    public var requestThumbnailHandler: ((ClipItem, @escaping (UIImage?) -> Void) -> Void)?
    public func requestThumbnail(for item: ClipItem, completion: @escaping (UIImage?) -> Void) {
        requestThumbnailCallCount += 1
        if let requestThumbnailHandler = requestThumbnailHandler {
            requestThumbnailHandler(item, completion)
        }
    }

    public private(set) var deleteThumbnailCacheIfExistsCallCount = 0
    public var deleteThumbnailCacheIfExistsHandler: ((ClipItem) -> Void)?
    public func deleteThumbnailCacheIfExists(for item: ClipItem) {
        deleteThumbnailCacheIfExistsCallCount += 1
        if let deleteThumbnailCacheIfExistsHandler = deleteThumbnailCacheIfExistsHandler {
            deleteThumbnailCacheIfExistsHandler(item)
        }
    }
}

public class AlbumListQueryMock: AlbumListQuery {
    public init() { }
    public init(albums: CurrentValueSubject<[Album], Error>) {
        self._albums = albums
    }

    public private(set) var albumsSetCallCount = 0
    private var _albums: CurrentValueSubject<[Album], Error>! { didSet { albumsSetCallCount += 1 } }
    public var albums: CurrentValueSubject<[Album], Error> {
        get { return _albums }
        set { _albums = newValue }
    }
}

public class AlbumQueryMock: AlbumQuery {
    public init() { }
    public init(album: CurrentValueSubject<Album, Error>) {
        self._album = album
    }

    public private(set) var albumSetCallCount = 0
    private var _album: CurrentValueSubject<Album, Error>! { didSet { albumSetCallCount += 1 } }
    public var album: CurrentValueSubject<Album, Error> {
        get { return _album }
        set { _album = newValue }
    }
}

public class ClipItemQueryMock: ClipItemQuery {
    public init() { }
    public init(clipItem: CurrentValueSubject<ClipItem, Error>) {
        self._clipItem = clipItem
    }

    public private(set) var clipItemSetCallCount = 0
    private var _clipItem: CurrentValueSubject<ClipItem, Error>! { didSet { clipItemSetCallCount += 1 } }
    public var clipItem: CurrentValueSubject<ClipItem, Error> {
        get { return _clipItem }
        set { _clipItem = newValue }
    }
}

public class ClipListQueryMock: ClipListQuery {
    public init() { }
    public init(clips: CurrentValueSubject<[Clip], Error>) {
        self._clips = clips
    }

    public private(set) var clipsSetCallCount = 0
    private var _clips: CurrentValueSubject<[Clip], Error>! { didSet { clipsSetCallCount += 1 } }
    public var clips: CurrentValueSubject<[Clip], Error> {
        get { return _clips }
        set { _clips = newValue }
    }
}

public class ClipQueryMock: ClipQuery {
    public init() { }
    public init(clip: CurrentValueSubject<Clip, Error>) {
        self._clip = clip
    }

    public private(set) var clipSetCallCount = 0
    private var _clip: CurrentValueSubject<Clip, Error>! { didSet { clipSetCallCount += 1 } }
    public var clip: CurrentValueSubject<Clip, Error> {
        get { return _clip }
        set { _clip = newValue }
    }
}

public class TagListQueryMock: TagListQuery {
    public init() { }
    public init(tags: CurrentValueSubject<[Tag], Error>) {
        self._tags = tags
    }

    public private(set) var tagsSetCallCount = 0
    private var _tags: CurrentValueSubject<[Tag], Error>! { didSet { tagsSetCallCount += 1 } }
    public var tags: CurrentValueSubject<[Tag], Error> {
        get { return _tags }
        set { _tags = newValue }
    }
}

public class TagQueryMock: TagQuery {
    public init() { }
    public init(tag: CurrentValueSubject<Tag, Error>) {
        self._tag = tag
    }

    public private(set) var tagSetCallCount = 0
    private var _tag: CurrentValueSubject<Tag, Error>! { didSet { tagSetCallCount += 1 } }
    public var tag: CurrentValueSubject<Tag, Error> {
        get { return _tag }
        set { _tag = newValue }
    }
}

public class UserSettingsStorageProtocolMock: UserSettingsStorageProtocol {
    public init() { }
    public init(showHiddenItems: AnyPublisher<Bool, Never>) {
        self._showHiddenItems = showHiddenItems
    }

    public private(set) var showHiddenItemsSetCallCount = 0
    private var _showHiddenItems: AnyPublisher<Bool, Never>! { didSet { showHiddenItemsSetCallCount += 1 } }
    public var showHiddenItems: AnyPublisher<Bool, Never> {
        get { return _showHiddenItems }
        set { _showHiddenItems = newValue }
    }

    public private(set) var setCallCount = 0
    public var setHandler: ((Bool) -> Void)?
    public func set(showHiddenItems: Bool) {
        setCallCount += 1
        if let setHandler = setHandler {
            setHandler(showHiddenItems)
        }
    }
}
